require('dotenv').config();

const http = require('http');

http.createServer((req, res) => {
	res.writeHead(200, { 'Content-Type': 'text/plain' });
	res.end('Bot is alive');
}).listen(3000);

const TelegramApi = require('node-telegram-bot-api');
const fs = require('fs');
const path = require('path');

const token = process.env.BOT_TOKEN;
const bot = new TelegramApi(token, { polling: true });

const HISTORY_FILE = path.join(__dirname, 'history.json');

let userHistories = {}; // –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–∏—Å–∫—ñ–≤ –ø–æ chatId

const sendName = async (text, chatId) => {
	const names = text
		.split(',')
		.map(name => name.trim())
		.filter(name => name.length > 0);

	if (names.length > 50) {
		return bot.sendMessage(chatId, '–ê –Ω–µ –¥–æ—Ö—ñ–±–∞? \n–î–∞–≤–∞–π –ø–æ–º–µ–Ω—à–µ');
	}

	if (!userHistories[chatId]) userHistories[chatId] = [];
	userHistories[chatId].unshift(names);
	userHistories[chatId] = userHistories[chatId].slice(0, 3);

	saveHistoryDebounced(); // –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ debounced –≤–µ—Ä—Å—ñ—é

	const randomName = names[Math.floor(Math.random() * names.length)];

	await bot.sendMessage(chatId, `üéâ –¶–µ–π –≥—î—Ä–æ–π: ${randomName}`, {
		reply_markup: {
			inline_keyboard: [
				[{ text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏', callback_data: 'history_0' }, { text: 'üìú –Ü—Å—Ç–æ—Ä—ñ—è', callback_data: 'show_history' }]
			]
		}
	});
};

const showHistory = (chatId) => {
	const history = userHistories[chatId];
	if (!history || history.length === 0) {
		return bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω.');
	}

	// –§–æ—Ä–º—É—î–º–æ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–æ–∂–Ω–æ–≥–æ —Å–ø–∏—Å–∫—É –∑ –∫–æ—Ä–æ—Ç–∫–∏–º –ø—Ä–µ–≤ º—é (–ø–µ—Ä—à—ñ 3 —ñ–º–µ–Ω–∞)
	const buttons = history.map((names, index) => {
		const preview = names.slice(0, 3).join(', ');
		return [{ text: `${preview}${names.length > 3 ? ', ...' : ''}`, callback_data: `history_${index}` }];
	});

	return bot.sendMessage(chatId, '–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫–∏:', {
		reply_markup: {
			inline_keyboard: buttons
		}
	});
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ—Å—Ç–æ—Ä—ñ—ó –∑ —Ñ–∞–π–ª—É
const loadHistory = () => {
	try {
		if (fs.existsSync(HISTORY_FILE)) {
			const data = fs.readFileSync(HISTORY_FILE, 'utf8');
			userHistories = JSON.parse(data);
		}
	} catch (e) {
		console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', e);
		userHistories = {};
	}
	return;
};

// –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω–∏–π –≤–∞—Ä—ñ–∞–Ω—Ç –∑ debounce –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è —á–∞—Å—Ç–∏—Ö –∑–∞–ø–∏—Å—ñ–≤
let saveTimeout;
const saveHistoryDebounced = () => {
	clearTimeout(saveTimeout);
	saveTimeout = setTimeout(() => {
		try {
			fs.writeFileSync(HISTORY_FILE, JSON.stringify(userHistories, null, 2));
		} catch (e) {
			console.error('–ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–Ω—ñ —ñ—Å—Ç–æ—Ä—ñ—ó:', e);
		}
	}, 1000); // –ó–∞—Ç—Ä–∏–º–∫–∞ 1 —Å–µ–∫—É–Ω–¥–∞
};

const start = () => {
	// –ó–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ —ñ—Å—Ç–æ—Ä—ñ—é –ø—Ä–∏ —Å—Ç–∞—Ä—Ç—ñ
	loadHistory();

	bot.setMyCommands([
		{ command: '/start', description: '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è' },
		{ command: '/history', description: '–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 3 —Å–ø–∏—Å–∫–∏' },
	]);

	bot.on('message', async (msg) => {
		const chatId = String(msg.chat.id);
		const text = msg.text || '';

		if (text === '/start') {
			return bot.sendMessage(chatId, '–ó–¥–æ—Ä–æ–≤! –ù–∞–ø–∏—à–∏ —ñ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä.: –ê–ª—î–≥, –Ñ–≤–ª–∞–º–ø—ñ–π, –ë–æ–º–∂), —ñ —è –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–µ—Ä—É –æ–¥–Ω–µ –∑ –Ω–∏—Ö.');
		}

		if (text === '/history') {
			return showHistory(chatId);
		}

		if (text.includes(',')) {
			return sendName(text, chatId);
		}

		return bot.sendMessage(chatId, '–¶–µ —à–æ –∑–∞ –º–∞—è—á–Ω—è? \n–ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É');
	});

	// –û–±—Ä–æ–±–∫–∞ –∫–Ω–æ–ø–∫–∏
	bot.on('callback_query', async (query) => {
		const chatId = query.message.chat.id;
		const data = query.data;

		if (query.data === 'repeat_last') {
			const history = userHistories[chatId];
			if (!history || history.length === 0) {
				return bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î. –ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω.');
			}
			const lastList = history[0]; // –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π —Å–ø–∏—Å–æ–∫
			const randomName = lastList[Math.floor(Math.random() * lastList.length)];

			return bot.sendMessage(chatId, `üéâ –¶–µ–π –≥—î—Ä–æ–π: ${randomName}`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîÅ –©–µ —Ä–∞–∑', callback_data: 'repeat_last' }],
						[{ text: 'üìú –Ü—Å—Ç–æ—Ä—ñ—è —Å–ø–∏—Å–∫—ñ–≤', callback_data: 'show_history' }]
					]
				}
			});
		}

		if (data === 'show_history') {
			const history = userHistories[chatId];
			if (!history || history.length === 0) {
				return bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—è. –ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É');
			}

			const buttons = history.map((names, index) => {
				const preview = names.slice(0, 3).join(', ');
				return [{ text: `${preview}${names.length > 3 ? ', ...' : ''}`, callback_data: `history_${index}` }];
			});

			return bot.sendMessage(chatId, '–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫–∏:', {
				reply_markup: { inline_keyboard: buttons }
			});
		}

		if (data.startsWith('history_')) {
			const index = parseInt(data.split('_')[1]);
			const history = userHistories[chatId];

			if (!history || !history[index]) {
				return bot.sendMessage(chatId, '–¶–µ–π —Å–ø–∏—Å–æ–∫ –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π.');
			}

			const list = history[index];
			const randomName = list[Math.floor(Math.random() * list.length)];

			return bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫: ${list.join(", ")}\n\nüéâ –¶–µ–π –≥—î—Ä–æ–π: ${randomName}`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏', callback_data: `history_${index}` }, { text: 'üìú –Ü—Å—Ç–æ—Ä—ñ—è', callback_data: 'show_history' }]
					]
				}
			});
		}
	});
};

start();
