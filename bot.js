const TelegramApi = require('node-telegram-bot-api');
const { loadHistory, saveHistoryDebounced, getHistory, addToHistory } = require('./historyUtils');

const token = process.env.BOT_TOKEN;
const bot = new TelegramApi(token, { polling: true });

const startBot = () => {
	const userHistories = loadHistory();

	const sendName = async (text, chatId) => {
		const names = text
			.split(',')
			.map(name => name.trim())
			.filter(name => name.length > 0);

		if (names.length > 50) {
			return bot.sendMessage(chatId, '–ê –Ω–µ –¥–æ—Ö—ñ–±–∞? \n–î–∞–≤–∞–π –ø–æ–º–µ–Ω—à–µ');
		}

		addToHistory(userHistories, chatId, names);
		saveHistoryDebounced(userHistories);

		const randomName = names[Math.floor(Math.random() * names.length)];

		await bot.sendMessage(chatId, `üéâ –¶–µ–π –≥—î—Ä–æ–π: ${randomName}`, {
			reply_markup: {
				inline_keyboard: [
					[{ text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏', callback_data: 'history_0' }, { text: 'üìú –Ü—Å—Ç–æ—Ä—ñ—è', callback_data: 'show_history' }]
				]
			}
		});
	};

	const showHistory = (chatId) => {
		const history = getHistory(userHistories, chatId);
		if (!history.length) {
			return bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ—Ä–æ–∂–Ω—è. –°–ø–æ—á–∞—Ç–∫—É –Ω–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω.');
		}

		const buttons = history.map((names, index) => {
			const preview = names.slice(0, 3).join(', ');
			return [{ text: `${preview}${names.length > 3 ? ', ...' : ''}`, callback_data: `history_${index}` }];
		});

		return bot.sendMessage(chatId, '–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫–∏:', {
			reply_markup: { inline_keyboard: buttons }
		});
	};

	bot.setMyCommands([
		{ command: '/start', description: '–ü—Ä–∏–≤—ñ—Ç–∞–Ω–Ω—è —Ç–∞ —ñ–Ω—Å—Ç—Ä—É–∫—Ü—ñ—è' },
		{ command: '/history', description: '–ü–æ–∫–∞–∑–∞—Ç–∏ –æ—Å—Ç–∞–Ω–Ω—ñ 3 —Å–ø–∏—Å–∫–∏' },
	]);

	bot.on('message', async (msg) => {
		const chatId = String(msg.chat.id);
		const text = msg.text || '';

		if (text === '/start') {
			return bot.sendMessage(chatId, '–ó–¥–æ—Ä–æ–≤! –ù–∞–ø–∏—à–∏ —ñ–º–µ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–º—É (–Ω–∞–ø—Ä.: –ê–ª—î–≥, –Ñ–≤–ª–∞–º–ø—ñ–π, –ë–æ–º–∂), —ñ —è –≤–∏–ø–∞–¥–∫–æ–≤–æ –≤–∏–±–µ—Ä—É –æ–¥–Ω–µ –∑ –Ω–∏—Ö.');
		}

		if (text === '/history') return showHistory(chatId);
		if (text.includes(',')) return sendName(text, chatId);

		return bot.sendMessage(chatId, '–¶–µ —à–æ –∑–∞ –º–∞—è—á–Ω—è? \n–ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É');
	});

	bot.on('callback_query', async (query) => {
		const chatId = String(query.message.chat.id);
		const data = query.data;

		if (query.data === 'repeat_last') {
			const history = getHistory(userHistories, chatId);
			if (!history || history.length === 0) {
				return bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—ó –ø–æ–∫–∏ –Ω–µ–º–∞—î. –ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω.');
			}
			const lastList = history[0]; // –Ω–∞–π–Ω–æ–≤—ñ—à–∏–π —Å–ø–∏—Å–æ–∫
			const randomName = lastList[Math.floor(Math.random() * lastList.length)];

			return bot.sendMessage(chatId, `üéâ –¶–µ–π –≥—î—Ä–æ–π: ${randomName}`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîÅ –©–µ —Ä–∞–∑', callback_data: 'repeat_last' }],
						[{ text: 'üìú –Ü—Å—Ç–æ—Ä—ñ—è', callback_data: 'show_history' }]
					]
				}
			});
		}

		if (data === 'show_history') {
			const history = getHistory(userHistories, chatId);
			if (!history || history.length === 0) {
				return bot.sendMessage(chatId, '–Ü—Å—Ç–æ—Ä—ñ—è –ø–æ–∫–∏ –ø–æ—Ä–æ–∂–Ω—è. –ù–∞–¥—ñ—à–ª–∏ —Å–ø–∏—Å–æ–∫ —ñ–º–µ–Ω —á–µ—Ä–µ–∑ –∫–æ–º—É');
			}

			const buttons = history.map((names, index) => {
				const preview = names.slice(0, 3).join(', ');
				return [{ text: `${preview}${names.length > 3 ? ', ...' : ''}`, callback_data: `history_${index}` }];
			});

			return bot.sendMessage(chatId, '–û—Å—Ç–∞–Ω–Ω—ñ —Å–ø–∏—Å–∫–∏:', {
				reply_markup: { inline_keyboard: buttons }
			});
		}

		if (data.startsWith('history_')) {
			const index = parseInt(data.split('_')[1]);
			const history = getHistory(userHistories, chatId);

			if (!history || !history[index]) {
				return bot.sendMessage(chatId, '–¶–µ–π —Å–ø–∏—Å–æ–∫ –±—ñ–ª—å—à–µ –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∏–π.');
			}

			const list = history[index];
			const randomName = list[Math.floor(Math.random() * list.length)];

			return bot.sendMessage(chatId, `–°–ø–∏—Å–æ–∫: ${list.join(", ")}\n\nüéâ –¶–µ–π –≥—î—Ä–æ–π: ${randomName}`, {
				reply_markup: {
					inline_keyboard: [
						[{ text: 'üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–∏', callback_data: `history_${index}` }, { text: 'üìú –Ü—Å—Ç–æ—Ä—ñ—è', callback_data: 'show_history' }]
					]
				}
			});
		}
	});
};

module.exports = startBot;
